---
- include: includes/obtain_session_token.yaml

- hosts: localhost
  tasks:
    - name: "Docsigner User"
      iam:
        iam_type: user
        name: "{{ env_prefix }}-docsigner"
        access_key_state: create
        state: present
        region: "{{ aws_region }}"
        aws_access_key: "{{ iam_aws_access_key }}"
        aws_secret_key: "{{ iam_aws_secret_key }}"
        security_token: "{{ iam_security_token|default(omit) }}"
      register: docsigner_user_info
    - name: "Check if AWS Creds Changed"
      set_fact:
        aws_creds_changed: "{{ docsigner_user_info.changed and docsigner_user_info.user_meta is defined }}"
    - name: "inventory/aws-docsigner_user"
      template:
        src: templates/inventory/iam_user.j2
        dest: "{{ inventory_dir }}/aws-docsigner_user"
        mode: 0600
      no_log: True
      when: aws_creds_changed
      with_items:
        - name: docsigner_user
          registration: "{{ docsigner_user_info }}"
      loop_control:
        label: "{{ item.name }}"
    - name: "Reload Inventory"
      meta: refresh_inventory
      when: aws_creds_changed

    - name: "Transaction Signing Queue"
      sqs_queue:
        name: "{{ env_prefix }}-transaction-signing-queue"
        state: present
        policy: "{{ lookup('template', 'templates/access_policy/sqs_queue.json.j2') }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      register: transaction_signing_queue_info_list
      with_items:
        - name: "{{ env_prefix }}-transaction-signing-queue"
          access:
            - user_arn: "{{ hostvars['docsigner_user'].arn }}"
              mode: read
      loop_control:
        label: "{{ item.name }}"
      until: not transaction_signing_queue_info_list.failed|default(False)
      retries: 5
      delay: 10
    - name: "inventory/aws-transaction_signing_queue"
      template:
        src: templates/inventory/sqs_queue.j2
        dest: "{{ inventory_dir }}/aws-transaction_signing_queue"
      with_items:
        - name: transaction_signing_queue
          registration: "{{ transaction_signing_queue_info_list.results[0] }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Signing Events Topic"
      sns_topic:
        name: "{{ env_prefix }}-signing-events-topic"
        state: present
        policy: "{{ lookup('template', 'templates/access_policy/sns_topic.json.j2') }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      register: signing_events_topic_info_list
      with_items:
        - name: "{{ env_prefix }}-signing-events-topic"
          access:
            - user_arn: "{{ hostvars['docsigner_user'].arn }}"
              mode: send
      loop_control:
        label: "{{ item.name }}"
    - name: "inventory/aws-signing_events_topic"
      template:
        src: templates/inventory/sns_topic.j2
        dest: "{{ inventory_dir }}/aws-signing_events_topic"
      with_items:
        - name: signing_events_topic
          registration: "{{ signing_events_topic_info_list.results[0] }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "PDF Store Bucket"
      s3_bucket:
        name: "{{ item.name }}"
        state: present
        policy: "{{ lookup('template', 'templates/access_policy/s3_bucket.json.j2') }}"
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      register: pdf_store_bucket_info_list
      with_items:
        - name: "{{ env_prefix | lower }}-pdf-store-{{ env_ulid | lower }}"
          access:
            - user_arn: "{{ hostvars['docsigner_user'].arn }}"
              key_patterns:
                "templates/*": read
                "results/*": write
      until: not pdf_store_bucket_info_list.failed|default(False)
      retries: 5
      delay: 10
    - name: "inventory/aws-pdf_store_bucket"
      template:
        src: templates/inventory/s3_bucket.j2
        dest: "{{ inventory_dir }}/aws-pdf_store_bucket"
      with_items:
        - name: pdf_store_bucket
          registration: "{{ pdf_store_bucket_info_list.results[0] }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Reload Inventory"
      meta: refresh_inventory

- include: includes/aws_creds_host_facts.yaml

- hosts: pdf_store_bucket
  tasks:
    - name: "Ensure Template in Bucket"
      s3:
        bucket: "{{ name }}"
        object: "templates/template.pdf"
        src: "s3-initial-data/template.pdf"
        encrypt: true
        mode: put
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
